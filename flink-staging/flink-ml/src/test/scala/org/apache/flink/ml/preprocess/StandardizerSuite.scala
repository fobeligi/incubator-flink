/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.flink.ml.preprocess

import org.apache.flink.api.scala._
import org.apache.flink.ml.math.{Vector, DenseVector}
import org.scalatest._


class StandardizerSuite extends FlatSpec with Matchers {
  behavior of "Flink's Standard Scaler"
  import StandardizerData._
  it should "first center and then properly scale the given vectors" in {

    val env = ExecutionEnvironment.getExecutionEnvironment
    env.setParallelism(2)

    val dataSet = env.fromCollection(data)
    val transformer = new Standardizer()
    val scaledVectors = transformer.transform(dataSet).collect


    scaledVectors.length should equal(centeredExpectedVectors.length)

    scaledVectors zip centeredExpectedVectors foreach {
      case (scaledVector, expectedVector) => {
        for (i <- 0 until scaledVector.size) {
          scaledVector.apply(i) should be(expectedVector.apply(i) +- (0.000001))
        }
      }
    }
  }

  it should "properly scale the given vectors without centering them first" in {

    val env = ExecutionEnvironment.getExecutionEnvironment
    env.setParallelism(2)

    val dataSet = env.fromCollection(data)
    val transformer = new Standardizer().setScaleMean(false)
    val scaledVectors = transformer.transform(dataSet).collect


    scaledVectors.length should equal(nonCenteredExpectedVectors.length)

    scaledVectors zip nonCenteredExpectedVectors foreach {
      case (scaledVector, expectedVector) => {
        for (i <- 0 until scaledVector.size) {
          scaledVector.apply(i) should be(expectedVector.apply(i) +- (0.000001))
        }
      }
    }
  }

  it should "properly center the given vectors without scaling them to unit variance" in {

    val env = ExecutionEnvironment.getExecutionEnvironment
    env.setParallelism(2)

    val dataSet = env.fromCollection(data)
    val transformer = new Standardizer().setScaleStd(false)
    val scaledVectors = transformer.transform(dataSet).collect


    scaledVectors.length should equal(nonScaledExpectedVectors.length)

    scaledVectors zip nonScaledExpectedVectors foreach {
      case (scaledVector, expectedVector) => {
        for (i <- 0 until scaledVector.size) {
          scaledVector.apply(i) should be(expectedVector.apply(i) +- (0.000001))
        }
      }
    }
  }
}

object StandardizerData {

  val data: Seq[Vector] = List(DenseVector(Array(2104.0, 1600.0, 2400.0, 1416.0, 3000.0, 1985.0,
    1534.0, 1427.0, 1380.0, 1494.0, 1940.0, 2000.0, 1890.0, 4478.0, 1268.0, 2300.0, 1320.0,
    1236.0, 2609.0, 3031.0, 1767.0, 1888.0, 1604.0, 1962.0, 3890.0, 1100.0, 1458.0, 2526.0,
    2200.0, 2637.0, 1839.0, 1000.0, 2040.0, 3137.0, 1811.0, 1437.0, 1239.0, 2132.0, 4215.0,
    2162.0, 1664.0, 2238.0, 2567.0, 1200.0, 852.0, 1852.0, 1203.0)),
    DenseVector(Array(3.0000, 3.0000, 3.0000, 2.0000, 4.0000, 4.0000, 3.0000, 3.0000, 3.0000,
      3.0000, 4.0000, 3.0000, 3.0000, 5.0000, 3.0000, 4.0000, 2.0000, 3.0000, 4.0000, 4.0000,
      3.0000, 2.0000, 3.0000, 4.0000, 3.0000, 3.0000, 3.0000, 3.0000, 3.0000, 3.0000, 2.0000,
      1.0000, 4.0000, 3.0000, 4.0000, 3.0000, 3.0000, 4.0000, 4.0000, 4.0000, 2.0000, 3.0000,
      4.0000, 3.0000, 2.0000, 4.0000, 3.0000)))


  val centeredExpectedVectors: Seq[Vector] = List(DenseVector(Array(0.13141542202104753,
    -0.50964069759068509,
    0.50790869861841437, -0.74367705871877798, 1.27107074577523882, -0.01994505066505601,
    -0.59358852277793583, -0.72968575452090290, -0.78946678154818739, -0.64446599258839077,
    -0.07718220420181784, -0.00086599948613539, -0.14077904146488657, 3.15099325527154983,
    -0.93192369701746136, 0.38071502409227687, -0.86578298626386985, -0.97262567286582535,
    0.77374347837804158, 1.31050078487834143, -0.29722726113203557, -0.14332291495540930,
    -0.50455295060963956, -0.04919959580606761, 2.40309444905786185, -1.14560907022137215,
    -0.69025571541780029, 0.66817272852134746, 0.25352134956613948, 0.80935770724536005,
    -0.20564781547321664, -1.27280274474750965, 0.05001147032431958, 1.44532607987604722,
    -0.24126204434053514, -0.71696638706828908, -0.96880986263004121, 0.16702965088836602,
    2.81647389126780867, 0.20518775324620725, -0.42823674589395716, 0.30185494588607170,
    0.72032213507706377, -1.01841539569523487, -1.46104938304619303, -0.18911263778481879,
    -1.01459958545945073)),
    DenseVector(Array(-0.22609336757768828, -0.22609336757768828, -0.22609336757768828,
      -1.55439190209660838, 1.10220516694123183, 1.10220516694123183, -0.22609336757768828,
      -0.22609336757768828, -0.22609336757768828, -0.22609336757768828, 1.10220516694123183,
      -0.22609336757768828, -0.22609336757768828, 2.43050370146015204, -0.22609336757768828,
      1.10220516694123183, -1.55439190209660838, -0.22609336757768828, 1.10220516694123183,
      1.10220516694123183, -0.22609336757768828, -1.55439190209660838, -0.22609336757768828,
      1.10220516694123183, -0.22609336757768828, -0.22609336757768828, -0.22609336757768828,
      -0.22609336757768828, -0.22609336757768828, -0.22609336757768828, -1.55439190209660838,
      -2.88269043661552837, 1.10220516694123183, -0.22609336757768828, 1.10220516694123183,
      -0.22609336757768828, -0.22609336757768828, 1.10220516694123183, 1.10220516694123183,
      1.10220516694123183, -1.55439190209660838, -0.22609336757768828, 1.10220516694123183,
      -0.22609336757768828, -1.55439190209660838, 1.10220516694123183, -0.22609336757768828))
  )

  val nonCenteredExpectedVectors: Seq[Vector] = List(DenseVector(Array(
    2.67615491202993150, 2.03509879241819869, 3.05264818862729825, 1.80106243129010601,
    3.81581023578412282, 2.52479443934382797, 1.95115096723094816, 1.81505373548798099,
    1.75527270846069650, 1.90027349742049312, 2.46755728580706624, 2.54387349052274869,
    2.40396044854399715, 5.69573274528043427, 1.61281579299142264, 2.92545451410116097,
    1.67895650374501404, 1.57211381714305864, 3.31848296838692569, 3.85524027488722520,
    2.24751222887684854, 2.40141657505347483, 2.04018653939924421, 2.49553989420281619,
    4.94783393906674629, 1.39913041978751163, 1.85448377459108360, 3.21291221853023146,
    2.79826083957502325, 3.35409719725424393, 2.33909167453566713, 1.27193674526137435,
    2.59475096033320352, 3.99006556988493122, 2.30347744566834889, 1.82777310294059481,
    1.57592962737884279, 2.71176914089724974, 5.36121338127669222, 2.74992724325509119,
    2.11650274411492667, 2.84659443589495575, 3.26506162508594766, 1.52632409431364913,
    1.08369010696269097, 2.35562685222406509, 1.53013990454943327
  )),
    DenseVector(Array(3.98489560355676042, 3.98489560355676042, 3.98489560355676042,
      2.65659706903784043, 5.31319413807568086, 5.31319413807568086, 3.98489560355676042,
      3.98489560355676042, 3.98489560355676042, 3.98489560355676042, 5.31319413807568086,
      3.98489560355676042, 3.98489560355676042, 6.64149267259460085, 3.98489560355676042,
      5.31319413807568086, 2.65659706903784043, 3.98489560355676042, 5.31319413807568086,
      5.31319413807568086, 3.98489560355676042, 2.65659706903784043, 3.98489560355676042,
      5.31319413807568086, 3.98489560355676042, 3.98489560355676042, 3.98489560355676042,
      3.98489560355676042, 3.98489560355676042, 3.98489560355676042, 2.65659706903784043,
      1.32829853451892022, 5.31319413807568086, 3.98489560355676042, 5.31319413807568086,
      3.98489560355676042, 3.98489560355676042, 5.31319413807568086, 5.31319413807568086,
      5.31319413807568086, 2.65659706903784043, 3.98489560355676042, 5.31319413807568086,
      3.98489560355676042, 2.65659706903784043, 5.31319413807568086, 3.98489560355676042))
  )

  val nonScaledExpectedVectors: Seq[Vector] = List(DenseVector(Array(103.31914893617022244,
    -400.68085106382977756, 399.31914893617022244, -584.68085106382977756, 999.31914893617022244,
    -15.68085106382977756, -466.68085106382977756, -573.68085106382977756, -620.68085106382977756,
    -506.68085106382977756, -60.68085106382977756, -0.68085106382977756, -110.68085106382977756,
    2477.31914893617022244, -732.68085106382977756, 299.31914893617022244, -680.68085106382977756,
    -764.68085106382977756, 608.31914893617022244, 1030.31914893617022244, -233.68085106382977756,
    -112.68085106382977756, -396.68085106382977756, -38.68085106382977756, 1889.31914893617022244,
    -900.68085106382977756, -542.68085106382977756, 525.31914893617022244, 199.31914893617022244,
    636.31914893617022244, -161.68085106382977756, -1000.68085106382977756, 39.31914893617022244,
    1136.31914893617022244, -189.68085106382977756, -563.68085106382977756,
    -761.68085106382977756, 131.31914893617022244, 2214.31914893617022244, 161.31914893617022244,
    -336.68085106382977756, 237.31914893617022244, 566.31914893617022244, -800.68085106382977756,
    -1148.68085106382977756, -148.68085106382977756, -797.68085106382977756)),
    DenseVector(Array(-0.17021276595744661, -0.17021276595744661, -0.17021276595744661,
      -1.17021276595744661, 0.82978723404255339, 0.82978723404255339, -0.17021276595744661,
      -0.17021276595744661, -0.17021276595744661, -0.17021276595744661, 0.82978723404255339,
      -0.17021276595744661, -0.17021276595744661, 1.82978723404255339, -0.17021276595744661,
      0.82978723404255339, -1.17021276595744661, -0.17021276595744661, 0.82978723404255339,
      0.82978723404255339, -0.17021276595744661, -1.17021276595744661, -0.17021276595744661,
      0.82978723404255339, -0.17021276595744661, -0.17021276595744661, -0.17021276595744661,
      -0.17021276595744661, -0.17021276595744661, -0.17021276595744661, -1.17021276595744661,
      -2.17021276595744661, 0.82978723404255339, -0.17021276595744661, 0.82978723404255339,
      -0.17021276595744661, -0.17021276595744661, 0.82978723404255339, 0.82978723404255339,
      0.82978723404255339, -1.17021276595744661, -0.17021276595744661, 0.82978723404255339,
      -0.17021276595744661, -1.17021276595744661, 0.82978723404255339, -0.17021276595744661))
  )
}

